/*
 * CARSTATE_type.h
 *
 *  Created on: 01.05.2016
 *      Author: Autogenerated by H-DA RTE Generator, (c) Prof. Fromm, 2016
 */



#ifndef CARSTATE_TYPE_H_
#define CARSTATE_TYPE_H_

#include "global.h"
#include "statemachine_type.h"
#include "statemachine_config.h"

/*****************************************************************************************
 *************** Type Definition for CARSTATE signal            **************************
 *****************************************************************************************/



typedef struct
{
	uint32_t 			state_normal;		/**< @brief current state of the normal system state. Format is uint32_t, because statemachine implementation is generic */
	uint32_t 			state_safety;		/**< @brief current state of the safety system state. Format is uint32_t, because statemachine implementation is generic */
	STATE_ActionPtr_t 	run_drive;			/**< @brief pointer to the current drive function */
	uint16_t			speedLimit;			/**< @brief speed limitation in [Percent] set by the safety monitor */
	uint16_t			remote_id;			/**< @brief identifier of the connected remote id */
	uint16_t			countSafeOk;		/**< @brief counter for the guard function of the safety state machine to safeok state*/
	uint16_t			countSafeOkOrSafe1; /**< @brief counter for the guard function of the safety state machine to safe1 state*/
} CARSTATE_data_t;


#define CARSTATE_INIT_DATA ((CARSTATE_data_t){(uint32_t)IS_NMT_BOOTING,		    \
                                              (uint32_t)IS_SAFE_ERROR2,			\
											   0,								\
											   0,								\
											   0,								\
											   0,								\
											   0})



#endif /* SWC_ENGINE_TYPE_H_ */

